 var CARS = {};
 CARS_dataList = [];
 CARS_errorString = [];
 CARS_allowedValidation = ['matchable','clearable'];
 
var $CARS_jQuery = jQuery.noConflict();
 
CARS.metadata = function(){
    var elementId;
    var action;
    var dependency;
    var name;
    var clearable;
    var matchable;
    var error;
	var executeonload;
	var togglevarid;
	var togglestyle;
	var togglestyleid;
	var requireddependency;
	var selecttextdependency;
	var defaultselectvalue;
}


CARS.submitCheck = function(actionString, currentObj, isSubmitForm){
  var actions = [];
  var matchedArray = [];
  var currentElemId = ''; 
	
	if(isSubmitForm) {
		CARS.submitParentForm(currentObj);
	} else {
		if(null !=actionString && actionString.indexOf(',') != -1){
			actions = actionString.split(",");
		} else{
			actions.push(actionString);
		}
		  for(var i=0;i<CARS_dataList.length;i++){
			  if(currentObj) {
				if(currentObj.id){
					currentElemId = currentObj.id;
				}
				if($CARS_jQuery(currentObj).prop('tagName') == "INPUT" || $CARS_jQuery(currentObj).prop('tagName') == "SELECT"){
					var parentElemId = $CARS_jQuery(currentObj).parent().prop('id');
					if(parentElemId){
						currentElemId = parentElemId;
					}
				}
				
			  }
			  if(CARS_dataList[i]['validationcheck']) {
				   matchedArray = CARS.getComparedResult(CARS_dataList[i],actions);
				   if(jQuery(matchedArray).length != 0) {
					   for(var j=0;j<matchedArray.length;j++) {
						   if($CARS_jQuery.inArray(matchedArray[j],CARS_allowedValidation) > -1) {
							  var fnName = 'CARS.'+matchedArray[j];
							  var functionObj = eval(fnName);
							  functionObj(CARS_dataList[i]);
						   }
					   }
					}
				}
			  var dataListObjId = $CARS_jQuery.trim(CARS_dataList[i].elementId);
			  if(dataListObjId === currentElemId) {
					
				  for(var j=0;j<actions.length;j++) {
					if(actions[j] == 'setHiddenValue') {
					  CARS.setHiddenValue(CARS_dataList[i],currentObj);
					}
					else if(actions[j] == 'toggleBackground') {
					  CARS.toggleBackground(CARS_dataList[i],currentObj);
					}
					else if(actions[j] == 'toggleRequired') {
					  CARS.toggleRequired(CARS_dataList[i],currentObj);
					}
					else if(actions[j] == 'toggle') {
					  CARS.toggle(CARS_dataList[i],currentObj,false);
					}
					else if(actions[j] == 'closePopUp') {
					  CARS.closePopUp();
					}
					else if(actions[j] == 'submit') {
					  CARS.submit(currentObj, CARS_dataList[i]);
					}
					else if(actions[j] == 'openPopUp') {
					  return CARS.openPopUp(currentObj);
					}
					else if(actions[j] == 'handleHiddenCheck') {
					  CARS.handleHiddenCheck();
					}
					else if(actions[j] == 'onchange') {
					  CARS.toggleTextOnChange(CARS_dataList[i],currentObj, false);
					}
					else if(actions[j] == 'setHiddenValueOnSubmit') {
					  CARS.setHiddenValueOnSubmit();
					}
					
				  }
			  }
		  } 
	}

   

  if(CARS_errorString.length > 0){
     $CARS_jQuery('#errorDiv').html("");
    for(var k=0; k < CARS_errorString.length; k++){
      $CARS_jQuery('#errorDiv').append('<div class="CARS_red CARS_bold">'+CARS_errorString[k]+'</div>');
    }
    CARS_errorString.length = 0;
    return false;
  }

return true;
}

CARS.toggleTextOnChange  = function(datalistObj, currentObj, isOnLoad) {
	if(currentObj){
		var defaultSelectValue = datalistObj.defaultselectvalue;
		var textDependencyId = datalistObj.selecttextdependency;
		var selectDependencyId = datalistObj.dependency;
		var defaultText = datalistObj.requireddependency;
		if(($CARS_jQuery(currentObj).prop('tagName') == "SELECT") || ($CARS_jQuery(currentObj).prop('tagName') == "INPUT")){
			var selectValue = $CARS_jQuery.trim($CARS_jQuery(currentObj).val());
			if(selectValue){
				if (defaultSelectValue && defaultSelectValue.indexOf(selectValue) > -1){
					$CARS_jQuery("#" + defaultText).hide();
					$CARS_jQuery("#" + textDependencyId).hide();
					$CARS_jQuery("#" + selectDependencyId).show();
				}else{
					$CARS_jQuery("#" + defaultText).hide();
					$CARS_jQuery("#" + selectDependencyId).hide();
					$CARS_jQuery("#" + textDependencyId).show();
				}
			}else{
				$CARS_jQuery("#" + selectDependencyId).hide();
				$CARS_jQuery("#" + textDependencyId).hide();
				$CARS_jQuery("#" + defaultText).show();
			}
			if(isOnLoad){
				if($CARS_jQuery("#" + selectDependencyId + " select").val() == $CARS_jQuery("#" + textDependencyId + " input").val()){
					$CARS_jQuery("#" + textDependencyId + " input").val('');
				}
			}
			
		}
	}
	return true;
}


CARS.submitParentForm  = function(currentObj) {
	if(currentObj){
		var elemName = $CARS_jQuery(currentObj).parent().prop('tagName');
		if(elemName == "FORM") {
			$CARS_jQuery(currentObj).parent().submit();
		}
	}
	return true;
}


CARS.getComparedResult = function(dataListObj,actions){
    var matchedResult = [];
    var validationArray = [];
    var validationString = dataListObj.validationcheck;
    if(null !=validationString && validationString.indexOf(',') != -1){
        validationArray = validationString.split(",");
    } else{
        validationArray.push(validationString);
    }

    for(var i=0; i < validationArray.length; i++){
       var element = validationArray[i];
       if($CARS_jQuery.inArray(element,actions) > -1){
          matchedResult.push(element);
       }
    }
	
    return matchedResult;   

}

CARS.closePopUp = function(){
	window.close();
}

CARS.openPopUp=function(currentObj){
		var anchorHREF = $CARS_jQuery(currentObj).attr('href');
		if(anchorHREF) {
			var title = $CARS_jQuery(currentObj).attr('title');
			CARS.popUpWindow = window.open(anchorHREF, title, 'scrollbars=yes,resizable=yes,directories=no,toolbar=no,menubar=no,status=no,width=760,height=600,left=25,top=25');
			return false;
		}
	
}

CARS.submit = function(currentObj, dataListObj){
	var currentElemId = ''; 
	if(currentObj != undefined && currentObj != null && currentObj.id != undefined && currentObj.id != null && currentObj.id != ''){
	  currentElemId = currentObj.id;
	}
    var dataListObjId = $CARS_jQuery.trim(dataListObj.elementId);
	if(dataListObjId == currentElemId){
		var elemName = $CARS_jQuery(currentObj).parent().prop('tagName');
		if(elemName == "FORM"){
			$CARS_jQuery(currentObj).parent().submit();
		}
	}
	return true;
}

//Test function
/*CARS.validate = function(validationObj){
    var parentObjId = $CARS_jQuery.trim(validationObj.elementId);
    console.log(parentObjId);
    CARS_errorString.push("validation errors occured");
}*/


CARS.matchable = function(matchableObject){
   var returnVal =  true;
   var parentObjId = $CARS_jQuery.trim(matchableObject.elementId);
   var dependentObjId =  $CARS_jQuery.trim(matchableObject.dependency);
   var errorId = $CARS_jQuery.trim(matchableObject.error);
    if($CARS_jQuery('#'+parentObjId+' input').val() != $CARS_jQuery('#'+dependentObjId+' input').val()){
          CARS_errorString.push($CARS_jQuery('#'+errorId).html());
            returnVal = false;
       }
  
    return returnVal;
}

CARS.setHiddenValue = function(dataListObj,currentObj){
	var expSettingElement = $CARS_jQuery.trim(dataListObj.togglevarid);
	if(expSettingElement != null && expSettingElement != undefined){
		if($CARS_jQuery("#"+expSettingElement).val() == 'true'){
			$CARS_jQuery("#"+expSettingElement).val('false');
		}else{
			$CARS_jQuery("#"+expSettingElement).val('true');
		}
	}
}

CARS.setHiddenValueOnSubmit = function(){
	for(var i=0;i<CARS_dataList.length;i++){
		var dataListObj = CARS_dataList[i];
		var action = $CARS_jQuery.trim(dataListObj.action);
		if(action && action.indexOf("onchange") > -1){
			var hiddenElement = $CARS_jQuery.trim(dataListObj.togglevarid);
			if(hiddenElement){
				var selectTextDependency = dataListObj.selecttextdependency;
				var selectDependency = dataListObj.dependency;
				var defaultSelectValue = dataListObj.defaultselectvalue;
				var selectTextValue = $CARS_jQuery("#" + selectTextDependency + " input").val();
				var selectValue = $CARS_jQuery("#" + selectDependency + " select").val();
				var parentSelectValue = $CARS_jQuery("#" + dataListObj.name).val();
				if(parentSelectValue && $CARS_jQuery.trim(parentSelectValue) == ""){
					parentSelectValue = null;
					$CARS_jQuery("#" + hiddenElement).val('');
				}
				else if(defaultSelectValue && defaultSelectValue.indexOf(parentSelectValue) > -1){
					$CARS_jQuery("#" + hiddenElement).val(selectValue);
				}else if (defaultSelectValue && defaultSelectValue.indexOf(parentSelectValue) == -1){
					$CARS_jQuery("#" + hiddenElement).val(selectTextValue);
				}
			}
		}
	}
}



CARS.toggleBackground = function(dataListObj,currentObj){
var toggleStyle = $CARS_jQuery.trim(dataListObj.togglestyle);
var toggleStyleElemId = $CARS_jQuery.trim(dataListObj.togglestyleid);
	if(toggleStyle != null && toggleStyle != undefined && toggleStyleElemId != null && toggleStyleElemId != undefined){
		if($CARS_jQuery("#"+toggleStyleElemId) != undefined && $CARS_jQuery("#"+toggleStyleElemId)){
			if($CARS_jQuery("#"+toggleStyleElemId).attr('displaystyle') != undefined && $CARS_jQuery("#"+toggleStyleElemId).attr('displaystyle') != null){
				if($CARS_jQuery("#"+toggleStyleElemId).attr('displaystyle').indexOf(toggleStyle) > -1){
					var changedStyle = $CARS_jQuery("#"+toggleStyleElemId).attr('displaystyle').replace(toggleStyle,'')
					$CARS_jQuery("#"+toggleStyleElemId).attr('displaystyle',changedStyle);
				}else{
					$CARS_jQuery("#"+toggleStyleElemId).attr('displaystyle',toggleStyle);
				}
			}
		}
	}

}

CARS.toggleRequired = function(dataListObj,currentObj){
	var dependency = $CARS_jQuery.trim(dataListObj.requireddependency);
	var dependencyArray = [];
	if(dependency.indexOf(',') != -1){
		dependencyArray = dependency.split(',');
	} else{
		dependencyArray.push(dependency);
	}
	var allow = false;
	if(($CARS_jQuery(currentObj).prop('tagName') == "INPUT") && ($CARS_jQuery(currentObj).attr("type") == "checkbox") && ($CARS_jQuery(currentObj).is(":checked"))){
		allow = true;
	}
	for(var k=0;k<dependencyArray.length;k++){
		var depElement = $CARS_jQuery('#'+dependencyArray[k] + ' > span.CARS_red');
		if($CARS_jQuery(depElement).attr('displaystyle') != undefined && $CARS_jQuery(depElement).attr('displaystyle') != null){
			if(allow && $CARS_jQuery(depElement).attr('displaystyle').indexOf(":displaynone") > -1){
				var changedStyle = $CARS_jQuery(depElement).attr('displaystyle').replace(':displaynone','');
				$CARS_jQuery(depElement).attr('displaystyle',changedStyle);
			}else{
				if(!allow && $CARS_jQuery(depElement).attr('displaystyle').indexOf(":displaynone") == -1){
					$CARS_jQuery(depElement).attr('displaystyle',':displaynone');
				}
			}
			
		}
	}
}

var allow = false;
CARS.toggle = function(toggleObj,currentElem, toggleNow){
	var count = 0;
	var currentElemId = ''; 
	if(currentElem != undefined && currentElem != null && currentElem.id != undefined && currentElem.id != null){
		if(currentElem.id != undefined && currentElem.id != null && currentElem.id != ''){
		  currentElemId = currentElem.id;
		}else{
		  currentElemId=$CARS_jQuery(currentElem).parent().attr('id');
		}
    }
      var toggleElement = $CARS_jQuery.trim(toggleObj.elementId);
	  
      if(toggleNow || toggleElement == currentElemId){
		var dependencyElement = $CARS_jQuery.trim(toggleObj.dependency);
          var dependencyArray = [];
          if(dependencyElement.indexOf(',') != -1){
              dependencyArray = dependencyElement.split(',');
          } else{
            dependencyArray.push(dependencyElement);
          }
		for(var k=0;k<dependencyArray.length;k++){
			 var depElement = $CARS_jQuery('#'+dependencyArray[k]);
			if($CARS_jQuery(depElement).attr('displaystyle').indexOf(':displaynone') > -1){
				count++;
			}
		}
		if((toggleNow && toggleObj.executeonload == 'true') || (($CARS_jQuery(currentElem).prop('tagName') == "INPUT") && ($CARS_jQuery(currentElem).attr("type") == "checkbox"))){
			if(count >= 2 && (toggleNow || ($CARS_jQuery(currentElem).is(":checked")))){
				allow = true;
			}else{
				allow = false;
			}
		}
		
		if(allow || ((currentElem != undefined && currentElem != null) && (!(($CARS_jQuery(currentElem).prop('tagName') == "INPUT") && ($CARS_jQuery(currentElem).attr("type") == "checkbox"))))){
		  
		  var isFocused = false;
		  var changedStyle;
		  if(currentElem){
			var expandedCurrentElemValue = $CARS_jQuery(currentElem).attr('aria-expanded');
			  if(expandedCurrentElemValue == 'true'){
				$CARS_jQuery(currentElem).attr('aria-expanded','false');
			  }else{
				$CARS_jQuery(currentElem).attr('aria-expanded','true');
			  }
		  }else if(allow){
			var toggleElem = "#"+toggleElement;
			var expandedCurrentElemValue = $CARS_jQuery(toggleElem).attr('aria-expanded');
			  if(expandedCurrentElemValue == 'true'){
				$CARS_jQuery(toggleElem).attr('aria-expanded','false');
			  }else{
				$CARS_jQuery(toggleElem).attr('aria-expanded','true');
			  }
		  }
          for(var k=0;k<dependencyArray.length;k++){
			 var depElement = $CARS_jQuery('#'+dependencyArray[k]);
			 if(undefined != $CARS_jQuery(depElement).attr('aria-expanded')){
				var expandedValue = $CARS_jQuery(depElement).attr('aria-expanded');
				if(expandedValue == 'true'){
					$CARS_jQuery(depElement).attr('aria-expanded','false');
				}else{
					$CARS_jQuery(depElement).attr('aria-expanded','true');
				}
			 }
             if(undefined != $CARS_jQuery(depElement).attr('displaystyle')){
				 if($CARS_jQuery(depElement).attr('displaystyle').indexOf(':displaynone') > -1){
					changedStyle = $CARS_jQuery(depElement).attr('displaystyle').replace(':displaynone',':displayinline');
					$CARS_jQuery(depElement).attr('displaystyle',changedStyle);
					$CARS_jQuery(depElement).removeClass('CARS_displayNone').addClass('CARS_displayInline');
					count++;		
					if($CARS_jQuery(depElement).attr('focusrequired')){
						$CARS_jQuery('#'+dependencyArray[k] + " input, " + '#'+dependencyArray[k] + " a").each(function(){
						if($CARS_jQuery(this).attr("focusonload") && !isFocused){
							$CARS_jQuery(this).focus();
							isFocused = true;
						}
						});
					}
				 }else {
					changedStyle = $CARS_jQuery(depElement).attr('displaystyle').replace('displayblock','displaynone').replace('displayinline','displaynone')
					if(changedStyle.indexOf('displaynone')>-1){
						$CARS_jQuery(depElement).attr('displaystyle',changedStyle);
					}else{
						changedStyle = changedStyle+':displaynone';
					}
					$CARS_jQuery(depElement).attr('displaystyle',changedStyle);
					$CARS_jQuery(depElement).removeClass('CARS_displayBlock').removeClass('CARS_displayInline').addClass('CARS_displayNone'); 
				 }
				 if($CARS_jQuery(depElement).prop('tagName')=="A" && !isFocused){
						$CARS_jQuery(depElement).focus();
				}
			}
			else{
					$CARS_jQuery(depElement).attr('displaystyle',':displaynone');
					$CARS_jQuery(depElement).removeClass('CARS_displayBlock').removeClass('CARS_displayInline').addClass('CARS_displayNone'); 
				 }
          }
		  
        }
      }
    
    return true;
}


CARS.expandOrCollapse = function(){
	for(var i=0;i<CARS_dataList.length;i++){
		
		if(CARS_dataList[i]['action'].indexOf("toggle") > -1){
			var elementId = CARS_dataList[i]['elementId'];
			var depElement = $CARS_jQuery('#'+elementId);
			var expandedCurrentElemValue = $CARS_jQuery(depElement).attr('aria-expanded');
			if(expandedCurrentElemValue == undefined && $CARS_jQuery(depElement).prop("tagName") == 'A'){
				$CARS_jQuery(depElement).attr('aria-expanded','false');
			}
		}
		if(CARS_dataList[i]['executeonload'] == 'true'){
			if(CARS_dataList[i]['action'].indexOf("toggle") > -1){
				CARS.toggle(CARS_dataList[i],null, true);
			}
			if(CARS_dataList[i]['action'].indexOf("onchange") > -1){
				CARS.toggleTextOnChange(CARS_dataList[i],$CARS_jQuery("#" + CARS_dataList[i]['elementId'] + " select"), true);
			}
		}
		if(CARS_dataList[i]['action'].indexOf("toggleRequired") > -1){
			CARS.toggleRequired(CARS_dataList[i],$CARS_jQuery("#" + CARS_dataList[i]['elementId']));
		}
		if(CARS_dataList[i]['action'] == 'error'){
			var elementId = CARS_dataList[i]['elementId'];
			if($CARS_jQuery("#" + elementId).html()){
				if($CARS_jQuery("#" + elementId).find(">div :first")){
					$CARS_jQuery("#" + elementId).find(">div :first").focus();
				}
			}
		}
		
		
	}
}

CARS.clearable = function(clearableObj){
   var elementObjId = $CARS_jQuery.trim(clearableObj.elementId);
   $CARS_jQuery('#'+elementObjId+' input').val(''); 
   return true;
}

function getFormId(obj) {
	var returnVal;
	if (typeof $CARS_jQuery(obj).attr('id') != 'undefined' && $CARS_jQuery(obj).attr('id').length > 0) {
		returnVal = $CARS_jQuery(obj).attr('id');
	} else {
		returnVal = getFormId($CARS_jQuery(obj).parent());
	}
	return returnVal;
}

CARS.handleHiddenCheck = function() {
	$CARS_jQuery("input[type=checkbox]:checked").each(function() {
		if ($CARS_jQuery(this).attr("onclick")) {
			func = eval("CARS.handleCheck");
			func($CARS_jQuery(this));
		}
	});
}

CARS.handleCheck = function(currentObj) {
	var elementId = getFormId($CARS_jQuery(currentObj));
	if (elementId != undefined && elementId != null && elementId != '') {
		var formDivID = getFormId($CARS_jQuery('#' + elementId));
		var hiddenElem;
		var hiddenElemArray = [];
		if (formDivID != undefined && formDivID != null && formDivID != '' && ($CARS_jQuery(currentObj).attr("type") == "checkbox")) {
			if ($CARS_jQuery('#' + formDivID + ' input[type="hidden"][name="' + $CARS_jQuery(currentObj).attr("name") + '_hidden"]').length > 0) {
				hiddenElem = $CARS_jQuery('#' + formDivID
						+ ' input[type="hidden"][name="'
						+ $CARS_jQuery(currentObj).attr("name") + '_hidden"]');
				if (null != hiddenElem && hiddenElem.val() != '' && hiddenElem.val().indexOf(',') != -1) {
					hiddenElemArray = hiddenElem.val().split(',')
				} else {
					hiddenElemArray.push(hiddenElem.val());
				}
				if ($CARS_jQuery(currentObj).is(":checked")) {
					if (null != hiddenElemArray
							&& $CARS_jQuery.inArray($CARS_jQuery(currentObj).val(), hiddenElemArray) == -1) {
						hiddenElemArray.push($CARS_jQuery(currentObj).val());
					}
				} else {
					if (null != hiddenElemArray
							&& $CARS_jQuery.inArray($CARS_jQuery(currentObj).val(), hiddenElemArray) != -1) {
						hiddenElemArray.splice($CARS_jQuery
								.inArray($CARS_jQuery(currentObj).val(),
										hiddenElemArray), 1);
					}
				}
				if (hiddenElemArray != undefined && null != hiddenElemArray
						&& hiddenElemArray.length > 0) {
					hiddenElem.val(hiddenElemArray.toString());
				} else {
					hiddenElem.val("");
				}
				if (hiddenElem.val().indexOf(",") == 0) {
					hiddenElem.val(hiddenElem.val().substring(1));
				}
			} else {
				if ($CARS_jQuery(currentObj).is(":checked")) {
					$CARS_jQuery('<input>').attr({
						type : 'hidden',
						name : $CARS_jQuery(currentObj).attr("name") + '_hidden',
						value : $CARS_jQuery(currentObj).val()
					}).appendTo($CARS_jQuery('#' + formDivID));
					hiddenElem = $CARS_jQuery('#' + formDivID
							+ ' input[type="hidden"][name="'
							+ $CARS_jQuery(currentObj).attr("name") + '_hidden"]');
				}
				
			}
		}
	}
}

CARS.autoComplete = function(){
	  var instJSON = { instArr: [] };
	  var instList = new Array();
	  var count="1";
	  $CARS_jQuery("#inst-choice-fed-inst-list form").each(function(){
		var name= $CARS_jQuery(this).find("a").html().replace('&amp;','&');
		var urlAction = $CARS_jQuery(this).attr("action");
		var params = '?';
		$CARS_jQuery(this).find('input[type=hidden]').each(function(){
		  var hiddenName= $CARS_jQuery(this).attr('name');
		  var hiddenValue = $CARS_jQuery(this).attr('value');
		  params = params.concat(hiddenName,'=', hiddenValue,'&');
		});
		urlAction = urlAction.concat(params);
		instJSON.instArr.push ({
		  "id": "inst-search-"+count++,
		  "name": name,
		  "href": urlAction
		});
	  });

	 
	  $CARS_jQuery.each(instJSON.instArr, function(index, val){
		instList.push(val.name);
	  });
	  
		$CARS_jQuery("#inst_srch input").autocomplete({
		  source: function(request, response) {
			var results = $CARS_jQuery.ui.autocomplete.filter(instList, request.term);
			  if (!results.length) {
			  results = ["No results found"];
			}
			response(results);
		  },
		  select: function(event, ui){
			var name = ui.item.value;
			$CARS_jQuery.each(instJSON.instArr, function(index, val){
			  if(name === val.name){
				window.open(val.href, "_self");
			  }
			});
			
		  },
		  open: function(event, ui){
			$CARS_jQuery("ul#ui-id-1 li").each(function(){
			  var value = $CARS_jQuery(this).find("a").text();
			  $CARS_jQuery(this).find("a").text('');
			
			  if(value != "No results found"){
				$CARS_jQuery(this).find("a").attr("title", value);
				$CARS_jQuery(this).find("a").attr("aria-atomic", "true");
				$CARS_jQuery(this).find("a").attr("aria-live", "assertive");
				$CARS_jQuery(this).find("a").append('<span class="inst-name">'+value+'</span>');
				$CARS_jQuery(this).find("a").append('<span class="inst-login-link">Login</span>');                  
				}else{
				$CARS_jQuery(this).addClass("ui-menu-item-hover-no-results");
				$CARS_jQuery(this).find("a").append('<span class="inst-name">'+value+'</span>');
			  }
			  
			});
			  var acData = $CARS_jQuery(this).data('uiAutocomplete');
			  acData.menu.element.find('a').each(function () {
			  var me = $CARS_jQuery(this).find(">:first-child");  
			  var keywords = acData.term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1");
			  me.html(me.text().replace(new RegExp("("+keywords+")", "gi"), "<strong>$1</strong>"));
			});
		  }
		});
	  
	  
	  $CARS_jQuery( "#inst_srch" ).keypress(function(event) {
		if(event.keyCode == 13){
		  event.preventDefault();
		}
	  });



	$CARS_jQuery("#inst-choice-fed-select select").change(function(){
		if($CARS_jQuery("#inst-choice-fed-select select").val() == -1){
		  $CARS_jQuery("#inst-choice-fed-inst-list").hide();
		}else if($CARS_jQuery("#inst-choice-fed-select select").val() == 0){
		  $CARS_jQuery("#inst-choice-fed-inst-list").show(); 
		  $CARS_jQuery("#inst-choice-fed-inst-list div div span").each(function(){
			$CARS_jQuery(this).parent().show();
		  });
		}else{
		  $CARS_jQuery("#inst-choice-fed-inst-list").show();
		  $CARS_jQuery("#inst-choice-fed-inst-list>div>div>span").each(function(){
			if($CARS_jQuery("#inst-choice-fed-select select option:selected").text() == $CARS_jQuery(this).text()){
			  $CARS_jQuery(this).parent().show();
			}else{
			  $CARS_jQuery(this).parent().hide();
			}
		  });
		}
	  });
	  
	  
	  if($CARS_jQuery("#inst-choice-fed-select select").val() == -1){
		$CARS_jQuery("#inst-choice-fed-inst-list").hide();
	  }else{
		$CARS_jQuery("#inst-choice-fed-select select").change();
	  }
	  
	  
	  var loginInstJSON = { loginInstArr: [] };
	  var loginInstList = new Array();
	  var loginCount="1";
	  $CARS_jQuery("#login-inst-choice-fed-inst-list form").each(function(){
			var name= $CARS_jQuery(this).find("a").html().replace('&amp;','&');
			var urlAction = $CARS_jQuery(this).attr("action");
			var params = '?';
			$CARS_jQuery(this).find('input[type=hidden]').each(function(){
			  var hiddenName= $CARS_jQuery(this).attr('name');
			  var hiddenValue = $CARS_jQuery(this).attr('value');
			  params = params.concat(hiddenName,'=', hiddenValue,'&');
			});
			urlAction = urlAction.concat(params);
			loginInstJSON.loginInstArr.push ({
			  "id": "login-inst-search-"+loginCount++,
			  "name": name,
			  "href": urlAction
			});
		  });
	  
	
	  $CARS_jQuery.each(loginInstJSON.loginInstArr, function(index, val){
		loginInstList.push(val.name);
	  });
	  
	  
	  $CARS_jQuery("#login_inst_srch input").autocomplete({
			  source: function(request, response) {
				var results = $CARS_jQuery.ui.autocomplete.filter(loginInstList, request.term);
				  if (!results.length) {
				  results = ["No results found"];
				}
				response(results);
			  },
			  select: function(event, ui){
				var name = ui.item.value;
				$CARS_jQuery.each(loginInstJSON.loginInstArr, function(index, val){
				  if(name === val.name){
					window.open(val.href, "_self");
				  }
				});
				
			  },
			  open: function(event, ui){
				$CARS_jQuery("ul#ui-id-1 li").each(function(){
				  var value = $CARS_jQuery(this).find("a").text();
				  $CARS_jQuery(this).find("a").text('');
				
				  if(value != "No results found"){
					$CARS_jQuery(this).find("a").attr("title", value);
					$CARS_jQuery(this).find("a").append('<span class="inst-name">'+value+'</span>');
					$CARS_jQuery(this).find("a").append('<span class="inst-login-link">Login</span>');                  
					}else{
					$CARS_jQuery(this).addClass("ui-menu-item-hover-no-results");
					$CARS_jQuery(this).find("a").append('<span class="inst-name">'+value+'</span>');
				  }
				  
				});
				
				$CARS_jQuery("ul#ui-id-2 li").each(function(){
					  var value = $CARS_jQuery(this).find("a").text();
					  $CARS_jQuery(this).find("a").text('');
					
					  if(value != "No results found"){
						$CARS_jQuery(this).find("a").attr("title", value);
						$CARS_jQuery(this).find("a").append('<span class="inst-name">'+value+'</span>');
						$CARS_jQuery(this).find("a").append('<span class="inst-login-link">Login</span>');                  
						}else{
						$CARS_jQuery(this).addClass("ui-menu-item-hover-no-results");
						$CARS_jQuery(this).find("a").append('<span class="inst-name">'+value+'</span>');
					  }
					  
					});
				
				  var acData = $CARS_jQuery(this).data('uiAutocomplete');
				  acData.menu.element.find('a').each(function () {
				  var me = $CARS_jQuery(this).find(">:first-child");  
				  var keywords = acData.term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1");
				  me.html(me.text().replace(new RegExp("("+keywords+")", "gi"), "<strong>$1</strong>"));
				});
			  }
			});
		  
	  $CARS_jQuery( "#login_inst_srch" ).keypress(function(event) {
			if(event.keyCode == 13){
			  event.preventDefault();
			}
		 });
	    
}

CARS.socialProvider = function(){
	
		var socialProviderlist = '';
		var socialProviderName = '';
		var socialRedirectUrl = '';
		var selfManagedToken = '';
		var selfManagedId = ''; 
		if($CARS_jQuery("#social_provider_data").length > 0){
			socialProviderlist = $CARS_jQuery("#social_gigya_providerList").text();
			socialProviderlist = socialProviderlist.replace(' ','');
			socialProviderName = $CARS_jQuery("#social_gigya_providerName").text();
			socialRedirectUrl = $CARS_jQuery("#social_gigya_redirect_url").text();
			pii_req_flag = $CARS_jQuery("input[name='PII_Req']").val();
			selfManagedToken = $CARS_jQuery("input[name='self_managed_token']").val();
			selfManagedId = $CARS_jQuery("input[name='self_managed_dept_id']").val(); 
			if( socialRedirectUrl != ''){
				socialRedirectUrl = "https://" + socialRedirectUrl + "?auth_type=SOCIAL";
				if(typeof pii_req_flag != "undefined" && pii_req_flag != '' && pii_req_flag == 'Y'){
					socialRedirectUrl = socialRedirectUrl + "&PII_Req=Y";
				}
				if(typeof selfManagedToken != "undefined" && selfManagedToken != '' && selfManagedToken.length > 0){
					socialRedirectUrl = socialRedirectUrl + "&self_managed_token=" + selfManagedToken;
				}
				if(typeof selfManagedId != "undefined" && selfManagedId != '' && selfManagedId.length > 0){
					socialRedirectUrl = socialRedirectUrl + "&self_managed_dept_id=" + selfManagedId;
				} 
			}
			$CARS_jQuery("#social_provider_data").hide();
		}
			
		var container = [];
		container.push("social_icons_group");
		if($CARS_jQuery("#social_icons_group_two").length > 0){
			container.push("social_icons_group_two");
		}
		if($CARS_jQuery("#logout_social_icons_group").length > 0){
			container.push("logout_social_icons_group");
			socialProviderName = $CARS_jQuery("#logout_social_gigya_providerName").text();
		}
		if($CARS_jQuery("#profile_social_icons_group").length > 0){
			container.push("profile_social_icons_group");
			socialProviderName = $CARS_jQuery("#profile_social_gigya_providerName").text();
			
		}
		if(typeof gigya != "undefined" && (socialProviderlist.length > 0 || socialProviderName.length > 0)){
			$CARS_jQuery.each(container, function(index,value){
				var onloadReq = false;
				var buttonSize = 20;
				if(value == 'profile_social_icons_group'){
					onloadReq = true;
					buttonSize = 30;
					socialProviderlist = $CARS_jQuery("#profile_social_gigya_providerList").text();
					socialProviderlist = socialProviderlist.replace(' ','');
					socialProviderName = $CARS_jQuery("#profile_social_gigya_providerName").text();
				}if(value == 'logout_social_icons_group'){
					onloadReq = true;
					buttonSize = 15;
					socialProviderlist = $CARS_jQuery("#logout_social_gigya_providerList").text();
					socialProviderlist = socialProviderlist.replace(' ','');
					socialProviderName = $CARS_jQuery("#logout_social_gigya_providerName").text();
				}
				gigya.socialize.showLoginUI({
						height: 100
						,width: 300
						,showTermsLink:false 
						,hideGigyaLink:true 
						,buttonsStyle: 'standard'
						,enabledProviders: socialProviderlist
						,showWhatsThis: false 
						,containerID: this
						,cid:''
						,sessionExpiration:0
						,redirectURL: socialRedirectUrl
						,authCodeOnly:'true'
						,authFlow:'redirect'
						,UIConfig: '<config><body><controls><snbuttons buttonsize="'+buttonSize+'" /></controls></body></config>'
						,onLoad:function(){
							if(onloadReq){
								CARS.gigyaCheck(socialProviderName,value,buttonSize);
							}
						}
					});
				
			});
		}
}
	
CARS.gigyaCheck = function(social_provider_name, div_id, buttonsize){
					if(social_provider_name !=""){
						var social_divName = div_id;
						var _gig_social_proName = social_provider_name.toLowerCase();
						var x = $CARS_jQuery('#' + social_divName).html();
						var y = x.replace('gigid','id');
						$CARS_jQuery('#' + social_divName).html('');
						$CARS_jQuery('#' + social_divName).html(y);
						if($CARS_jQuery('#' + social_divName + ' #' + _gig_social_proName) || $CARS_jQuery('#' + social_divName + ' #' + _gig_social_proName.toLowerCase())){
							var social_id = social_divName + "-social-provider";
							var social_custom_id = social_divName + "-customid";
							$CARS_jQuery('#' + social_divName + ' #' + _gig_social_proName).attr('id',social_id);
							var z = document.getElementById(social_id).innerHTML.replace(new RegExp("<div", "ig"), '<div id="' + social_custom_id + '"');
							document.getElementById(social_divName).innerHTML = '';
							document.getElementById(social_divName).innerHTML = z;
							/********If GIGYA Chagnes the icon url path the below code should be changed******************/
							var urlbg = document.getElementById(social_custom_id).style.
							backgroundImage.replace('url(','').replace(')','').replace('"','');
							urlbg = urlbg.replace('"','');
							/**********Using Src ----var urlbg = $CARS_jQuery(z).attr("src");----- ***/
							/***************************************END***************************************************/
							document.getElementById(social_divName).innerHTML = '';
							document.getElementById(social_divName).innerHTML = '<img src="'+urlbg+'" height="' + buttonsize + 'px" width="' + buttonsize + 'px"/>';
							document.getElementById(social_divName).style.width = '' + buttonsize + 'px';
							document.getElementById(social_divName).style.height = '' + buttonsize + 'px';
							document.getElementById(social_divName).style.cssFloat ='left';
							document.getElementById(social_divName).style.marginRight='5px';
							document.getElementById(social_divName).style.verticalAlign='top';
						}else{
							window.setTimeout(gigyaCheck,250);
						}
					}
}

$CARS_jQuery(document).ready(function(){
	CARS.expandOrCollapse();
    CARS.autoComplete();
	CARS.socialProvider();
});


